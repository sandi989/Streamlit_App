# -*- coding: utf-8 -*-
"""FINAL PROJECT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1p9dYUqTtqMDYsNr45ys1QK-k4fEYRPGw
"""

import pandas as pd
from nlp_id.lemmatizer import Lemmatizer
from nlp_id.tokenizer import Tokenizer, PhraseTokenizer
from nlp_id.postag import PosTag
from nlp_id.stopword import StopWord
import nltk
from text_processing import TextProcessing
from pandas import DataFrame
import seaborn as sns
import matplotlib.pyplot as plt
from nltk.tokenize import word_tokenize
from nltk.probability import FreqDist
from nltk import ngrams
from tqdm import tqdm
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
import streamlit as st 
import base64
from pathlib import Path


nltk.download('popular')
st.set_page_config(layout="wide")
current_dir = Path(__file__).parent if "__file__" in locals() else Path.cwd()
css_file = current_dir / "styles" / "main.css"

path_dataset = st.secrets.path_configuration.path_dataset
filename = "imdb_reviews.csv"

#container Title
with st.container():
    st.title('Analisis sentimen Respon Publik Terhadap 10 Judul Film')
    st.text('Oleh Sandi Hendrawan')
    st.divider()

st.markdown(""" Pada Aplikasi ini merupakan website sederhana analisis 
            sentimen dimana dataset yang diambil merupakan hasil review 10 film 
            IMDb dan dari dilakukan analisis ini diharapkan dapat memberikan wawasan 
            berharga untuk industri film, memahami tren sentimen, dan meningkatkan 
            pemahaman terhadap preferensi penonton. """)


#10 judul Film
# Membuat layout kolom dengan 10 kolom
col1, col2, col3, col4, col5 = st.columns(5)
st.write('---')
col6, col7, col8, col9, col10 = st.columns(5)

# Menampilkan judul film dan gambar untuk setiap kolom
with col1:
    st.subheader("The Dark Night")
    st.image("dark_night.jpg", width=150)  # Ganti "img1.jpg" dengan path gambar film yang sesuai

with col2:
    st.subheader("Inception")
    st.image("inceptionn.jpg", width=150)

with col3:
    st.subheader("The Matrix")
    st.image("the_matrix.jpg", width=150)

with col4:
    st.subheader("The Shawshank Redemption")
    st.image("the_shawshank.jpg", width=150)

with col5:
    st.subheader("Schindler's List")
    st.image("Schindler's_List_movie.jpg", width=150)

with col6:
    st.subheader("Star Wars")
    st.image("star_wars.jpg", width=150)

with col7:
    st.subheader("The Lord of the Rings")
    st.image("the_LOTR.jpg", width=150) 

with col8:
    st.subheader("The Godfather")
    st.image("the_godfather.jpg", width=150)

with col9:
    st.subheader("Taxi Driver")
    st.image("Taxi_Driver.jpg", width=150)

with col10:
    st.subheader("Gone with the Wind")
    st.image("gone_with_the_wind.jpg", width=150)

st.write('#')
#baca data
df = pd.read_csv(f"{path_dataset}{filename}")
st.subheader("Dataset")
st.dataframe(
  df.sample(10),
  use_container_width=True,
  hide_index=True
)

df['Rating'] = df['Rating'].str.split('/').str[0]
df.dropna(axis=0, inplace=True)

# st.dataframe(df)

def csvdownload(df):
    csv = df.to_csv(index=False)
    b64 = base64.b64encode(csv.encode()).decode()  # Convert CSV string menjadi base64 (binary)
    href = f'<a href="data:file/csv;base64,{b64}" download="imdb_reviews.csv">Download CSV File</a>'
    return href

st.markdown(csvdownload(df), unsafe_allow_html=True)

st.divider()

df_ = df[['Review']].copy()

print(df)

df.info()

def clean_text(data):
    mod = TextProcessing()
    hasil = mod.lowercase(data)
    hasil = mod.text_cleaning(hasil)
    hasil = mod.tokenization(hasil)
    hasil = mod.stopword_removal(hasil)
    hasil = mod.stemming(hasil)

    return hasil

df_['cleaned'] = df_.Review.apply(lambda x:clean_text(x))

# st.dataframe(df_, use_container_width=True)

mod = TextProcessing()
df_["cleaned_token"] = df_.cleaned.apply(lambda x: mod.tokenization(x))


st.write('#')

with st.container():
  col1, col2 = st.columns([2,1])
  with col1:
    #menampilkan hasil sentimen analisis
    st.dataframe(df_.sample(10), use_container_width=True, hide_index=True)
  with col2:
     st.markdown(''' 
            <style>
                .analisis_1 {
                  font-size:30px;
                 }
            </style>
                 ''',
                 unsafe_allow_html=True)

     st.markdown("""<p class = "analisis_1"> Pada tabel ini merupakan hasil dari pembersihan dataset mentah
            dan proses text preprocessing </p>""",unsafe_allow_html=True)


with open("./positive-words.txt","r") as positif_file :
  positive_words = list(set(positif_file.readlines()))
with open("./negative-words.txt","r") as negative_file :
  negative_words = list(set(negative_file.readlines()))

def sentiment_analysis(data):
  #persiapkan nilai sentimen
  good_count = 0
  bad_count = 0

  for good_word in positive_words:
    count = data.count(good_word.strip().lower())
    if count > 0:
      # print(good_word.strip())
      good_count += count

  for bad_word in negative_words:
    count = data.count(bad_word.strip().lower())
    if count > 0:
      # print(bad_word.strip())
      bad_count += count


  # print("positif:"+str(good_count))
  # print("negatif:"+str(bad_count))

  return good_count-bad_count

df_['count'] = df_["cleaned_token"].apply(lambda x:sentiment_analysis(x))

def sentimen(data:int):
  if data > 0:
    return "positif"
  elif data < 0:
    return "negatif"
  else:
    return "netral"

df_['sentiment'] = df_['count'].apply(lambda x: sentimen(x))

st.write('#')

with st.container():
  col1, col2 = st.columns([2,2])
  with col1:
    #menampilkan hasil histogram sentimen
    # plt.figure(figsize=(2, 2))
    sns.histplot(data=df_, x="sentiment")
    plt.title('Histogram Sentimen Review Film')
    st.pyplot()
  with col2:
     st.markdown(''' 
            <style>
                .analisis_1 {
                  font-size:30px;
                 }
            </style>
                 ''',
                 unsafe_allow_html=True)

     st.markdown("""<p class = "analisis_1"> Pada histgoram ini menampilkan
                 jumlah sentimen positif lebih dari 800, sentimen negatif lebih sedikit dari 200,
                 dan sentimen netral jumlahnya tidak sampai 100 </p>""",unsafe_allow_html=True)
  
st.write('#')

df_p = df_[df_["sentiment"] == 'positif']
df_ne = df_[df_["sentiment"] == 'negatif']
df_n = df_[df_["sentiment"] == 'netral']

df_p = df_p.sample(190)
df_ne = df_ne.sample(190)

_ = pd.concat([df_p, df_n, df_ne])

print(_)

vectorizer = TfidfVectorizer()
v_data = vectorizer.fit_transform(_['cleaned']).toarray()

X_train, X_test, y_train, y_test = train_test_split(v_data, _['sentiment'], test_size=0.2, random_state=18)

model_g = MultinomialNB()
model_g.fit(X_train,y_train)

y_preds = model_g.predict(X_test)

print(confusion_matrix(y_test,y_preds))

with st.container():
  st.divider()
  st.subheader(classification_report(y_test,y_preds))
  # st.markdown('nilai akurasinya adalah ',accuracy_score(y_test, y_preds))
  st.divider()

df_copy = df

df_copy['sentiment'] = df_['sentiment']

# st.dataframe(df_copy, use_container_width=True,)

grouped_df = df_copy.groupby(['Movie', 'sentiment']).size().unstack(fill_value=0)

print(grouped_df)


with st.container():
  col1, col2 = st.columns([1,1.5])
  with col1:
     st.markdown(''' 
            <style>
                .analisis_1 {
                  font-size:30px;
                 }
            </style>
                 ''',
                 unsafe_allow_html=True)

     st.markdown("""<p class = "analisis_1"> Bisa dilihat pada tampilan ini terlihat
                 bahwa film yang memiliki review sentimen publik yang positif tanpa adanya negatif dan netral
                 berada pada film The Lord of The Ring dan The Matrix, sedangkan film yang memilki sentimen negatif 
                 lebih banyak terletak pada film Taxi driver, dan pada film lainnya memiliki jumlah
                 review sentimen positif lebih banyak.</p>""",unsafe_allow_html=True)
     st.markdown("""<p class = "analisis_1"> Sehingga dapat disimpulkan bahwa Publik lebih menyukai
                 Film yang memiliki genre fiksi, aksi, dan fantasi. Dan juga publik kurang menyukai
                 Film yang bergenre kriminal.</p>""",unsafe_allow_html=True)
  with col2:
    fig, ax = plt.subplots(figsize=(25, 20))
    grouped_df.plot(kind='bar', stacked=True, color=['red','orange','green'])
    plt.title('Jumlah Review Berdasarkan Sentimen untuk Setiap Judul Film')
    plt.xlabel('Judul Film')
    plt.ylabel('Jumlah Review')
    plt.xticks(rotation=45, ha='right')
    plt.legend(title='Sentimen')
    plt.tight_layout()
    plt.show()
    st.pyplot()

